{"version":3,"sources":["components/AddTableButton.js","components/AddButton.js","components/Table.js","components/Button.js","components/ReactModal.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["AddTableButton","props","className","onClick","AddButton","color","Table","useState","pros","cons","tablePoint","setTablePoint","align","border","type","placeholder","colSpan","maxArray","length","tag","i","table","splice","concat","removeProsColumn","switchProsNumber","removeConsColumn","switchConsNumber","reduce","total","data","Button","clickMotion","text","customStyles","content","top","left","right","bottom","marginRight","transform","ReactModal","isOpen","modalIsOpen","onRequestClose","closeModal","style","Footer","href","src","App","setModalIsOpen","tableNum","setTableNum","alt","document","body","overflow","map","key","Boolean","window","location","hostname","match","Modal","setAppElement","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b142cd16.chunk.js","sourcesContent":["import React from 'react'\nimport './AddTableButton.css'\n\nconst AddTableButton = (props) => (\n    <div className=\"contents__add-container\">\n      <a onClick={props.onClick} className=\"contents__add--table\">表を追加する</a>\n    </div>\n)\n\nexport default AddTableButton\n","import React from 'react'\nimport './AddButton.css'\n\nconst AddButton = (props) => (\n    <div>\n      <a onClick={props.onClick} className={props.color === \"green\" ? \"table__add-button--pros\" : \"table__add-button--cons\"}>＋</a>\n    </div>\n)\n\nexport default AddButton\n","import React, {useState} from 'react'\nimport './Table.css'\nimport AddButton from \"./AddButton\";\n\nfunction Table() {\n  const [tablePoint, setTablePoint] = useState({pros: [0, 0], cons: [0, 0]})\n\n  const switchProsNumber = (i) => {\n    if (tablePoint.pros[i] === 3) {\n      tablePoint.pros[i] = 0\n    } else {\n      tablePoint.pros[i] += 1\n    }\n    setTablePoint({pros: tablePoint.pros, cons: tablePoint.cons})\n  }\n\n  const switchConsNumber = (i) => {\n    if (tablePoint.cons[i] === 3) {\n      tablePoint.cons[i] = 0\n    } else {\n      tablePoint.cons[i] += 1\n    }\n    setTablePoint({pros: tablePoint.pros, cons: tablePoint.cons})\n  }\n\n  const addProsColumn = () => {\n    setTablePoint({pros: tablePoint.pros.concat(0), cons: tablePoint.cons})\n  }\n  const addConsColumn = () => {\n    setTablePoint({pros: tablePoint.pros, cons: tablePoint.cons.concat(0)})\n  }\n\n  const removeProsColumn = (i) => {\n    if (tablePoint.pros.length <= 1) return;\n    tablePoint.pros.splice(i, 1)\n    setTablePoint({pros: tablePoint.pros.concat(), cons: tablePoint.cons})\n  }\n\n  const removeConsColumn = (i) => {\n    if (tablePoint.cons.length <= 1) return;\n    tablePoint.cons.splice(i, 1)\n    setTablePoint({pros: tablePoint.pros, cons: tablePoint.cons.concat()})\n  }\n\n  return (\n      <table align=\"center\" border={1} className=\"table\">\n        <caption className=\"table__caption\">\n          <div className=\"table__title\">\n            <label className=\"ef\">\n              <input type=\"text\" placeholder=\"タイトル\" />\n            </label>\n          </div>\n        </caption>\n        <thead className=\"table__header\">\n        <tr className=\"table__header-container\">\n          <th className=\"table__header--pros\" colSpan=\"2\">良い点</th>\n          <th className=\"table__header--cons\" colSpan=\"2\">悪い点</th>\n        </tr>\n        </thead>\n        <tbody className=\"table__body\">\n        {/*<tr>*/}\n        {/*  <td className=\"table__data--text\"><textarea className=\"table__data--textarea-pros\" placeholder=\"良い点\"></textarea>*/}\n        {/*  </td>*/}\n        {/*  <td className=\"table__data--value\"><p><strong>☓</strong></p>*/}\n        {/*    <hr></hr>*/}\n        {/*    <button onClick={switchNumber}>1</button>*/}\n        {/*  </td>*/}\n        {/*  <td className=\"table__data--text\"><textarea className=\"table__data--textarea-cons\" placeholder=\"悪い点\"></textarea>*/}\n        {/*  </td>*/}\n        {/*  <td className=\"table__data--value\"><p><strong>☓</strong></p>*/}\n        {/*    <hr></hr>*/}\n        {/*    <p>1</p></td>*/}\n        {/*</tr>*/}\n        {(() => {\n          let maxArray = tablePoint.pros\n          if (tablePoint.pros.length < tablePoint.cons.length) {\n            maxArray = tablePoint.cons\n          }\n          let tag = []\n          for (let i = 0; i < maxArray.length; i++) {\n            let table = [<tr/>]\n            if (tablePoint.pros.length > i) {\n              table = [...table,\n                <td className=\"table__data--text\"><textarea className=\"table__data--textarea-pros\" placeholder=\"良い点\"/>\n                </td>]\n              table = [...table, <td className=\"table__data--value\"><div onClick={() => removeProsColumn(i)}>\n                <div className=\"close-parts\"><span /></div>\n              </div>\n                <hr/>\n                <div onClick={() => switchProsNumber(i)} className=\"table__data--figure-pros\">{tablePoint.pros[i]}</div>\n              </td>]\n            } else {\n              table = [...table, <td className=\"table__data--text\"/>]\n              table = [...table, <td className=\"table__data--value\">\n                <hr/>\n              </td>]\n            }\n            if (tablePoint.cons.length > i) {\n              table = [...table,\n                <td className=\"table__data--text\"><textarea className=\"table__data--textarea-cons\" placeholder=\"悪い点\"/>\n                </td>]\n              table = [...table, <td className=\"table__data--value\"><div onClick={() => removeConsColumn(i)}>\n                <div className=\"close-parts\"><span /></div>\n              </div>\n                <hr/>\n                <div onClick={() => switchConsNumber(i)} className=\"table__data--figure-cons\">{tablePoint.cons[i]}</div>\n              </td>]\n            } else {\n              table = [...table, <td className=\"table__data--text\"/>]\n              table = [...table, <td className=\"table__data--value\">\n                <hr/>\n              </td>]\n            }\n            tag = [...tag, table]\n          }\n          return tag\n        })()}\n        <tr>\n          {/*<td className=\"table__data--text\"><textarea className=\"table__data--textarea-pros\" placeholder=\"良い点\"></textarea>*/}\n          {/*</td>*/}\n          {/*<td className=\"table__data--value\"><p><strong>☓</strong></p>*/}\n          {/*  <hr></hr>*/}\n          {/*  <button onClick={switchNumber}>1</button>*/}\n          {/*</td>*/}\n          {/*<td className=\"table__data--text\"><textarea className=\"table__data--textarea-cons\" placeholder=\"悪い点\"></textarea>*/}\n          {/*</td>*/}\n          {/*<td className=\"table__data--value\"><p><strong>☓</strong></p>*/}\n          {/*  <hr></hr>*/}\n          {/*  <p>1</p></td>*/}\n        </tr>\n        <tr>\n          <td colSpan=\"2\">\n            <AddButton onClick={addProsColumn} color=\"green\"/>\n          </td>\n          <td colSpan=\"2\">\n            <AddButton onClick={addConsColumn} color=\"red\"/>\n          </td>\n        </tr>\n        <tr>\n          <td colSpan=\"2\">\n            <p className=\"table__data--sum-value\">{tablePoint.pros.reduce((total, data) => {return total + data})}</p>\n          </td>\n          <td colSpan=\"2\">\n            <p className=\"table__data--sum-value\">{tablePoint.cons.reduce((total, data) => {return total + data})}</p>\n          </td>\n        </tr>\n        </tbody>\n      </table>\n  )\n}\n\nexport default Table\n","import React from 'react'\nimport \"./Button.css\"\n\nconst Button = (props) => (\n  <div>\n    <a className=\"App-description__button--how-to-use\" onClick={props.clickMotion}>{props.text}</a>\n  </div>\n)\n\nexport default Button\n","import React from 'react'\nimport Modal from \"react-modal\";\nimport Button from \"./Button\"\nimport \"./ReactModal.css\"\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)',\n  }\n};\n\nconst ReactModal = (props) => (\n    <Modal\n        isOpen={props.modalIsOpen}\n        onRequestClose={props.closeModal}\n        style={customStyles}\n    >\n      <h2>使い方</h2>\n      <p>様々な選択肢について、それぞれ<strong>良い点、悪い点</strong>を洗い出し、間違えずに意思決定をすることが出来るフレームワークです。</p>\n      <p>プロコン(pros cons)リストとも呼ばれます。</p>\n      <ol>\n        <li>選択肢を洗い出します。</li>\n        <li>それぞれの選択肢に良い点、悪い点を洗い出します。</li>\n        <li>洗い出した良い点、悪い点について重要だと思うものに評価値をつけていきます。</li>\n      </ol>\n      <p>選択肢の合計点を比較しましょう！</p>\n      <div className=\"modal__button--center\">\n        <Button text=\"閉じる\" clickMotion={props.closeModal}/>\n      </div>\n    </Modal>\n)\n\nexport default ReactModal\n","import React from 'react'\nimport './Footer.css'\n\nconst Footer = () => (\n    <div className=\"footer\">\n      <p className=\"footer__text\">開発者: <a href=\"https://twitter.com/mypozi555\"><img className=\"footer__img\" src=\"Twitter_Logo_250x250.png\" />しがしぃ（@MyPoZi555）</a></p>\n    </div>\n)\n\nexport default Footer\n","import React, {useState} from 'react';\n\nimport './App.css';\nimport './components/Table.css'\n\nimport AddTableButton from './components/AddTableButton'\nimport Table from './components/Table'\nimport ReactModal from './components/ReactModal'\nimport Footer from \"./components/Footer\";\nimport Button from \"./components/Button\";\n\nfunction App() {\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n  const [tableNum, setTableNum] = useState([1])\n\n  const addTable = () => {\n    setTableNum([...tableNum, 1])\n  }\n\n  function openModal() {\n    document.body.style.overflow = 'hidden'; // 背景のスクロール無効にするため\n    setModalIsOpen(true)\n  }\n\n  function closeModal() {\n    document.body.style.overflow = '';\n    setModalIsOpen(false)\n  }\n\n  return (\n      <div className=\"App\">\n        <section className=\"App-description\">\n          <div className=\"App-description__title-section\">\n            <img src={\"pros_cons_title_icon1200.png\"} alt=\"タイトル画像\" className=\"App-description__title\" />\n          </div>\n          <div className=\"App-description__sub-content\">\n            <Button text=\"使いかた\" clickMotion={openModal}/>\n            <ReactModal modalIsOpen={modalIsOpen} closeModal={closeModal} />\n          </div>\n        </section>\n        <section className=\"contents\">\n          <div className=\"contents__container\">\n            {tableNum.map((table, i) => {\n              return <Table key={i} />\n            })}\n          </div>\n          <AddTableButton onClick={addTable} />\n        </section>\n        <Footer/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nModal.setAppElement('#root');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}